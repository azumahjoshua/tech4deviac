pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDS = credentials('dockerhub-credentials')
        DOCKER_HUB_USERNAME = 'joshua192'
        API_IMAGE = "${DOCKER_HUB_USERNAME}/banking-api"
        PROCESSOR_IMAGE = "${DOCKER_HUB_USERNAME}/banking-processor"
        FRONTEND_IMAGE = "${DOCKER_HUB_USERNAME}/banking-frontend"
        VERSION = "v1.0.${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        // stage('Debug') {
        //     steps {
        //         script {
        //             sh 'pwd'
        //             sh 'ls -la'
        //         }
        //     }
        // }

        stage('Build Docker Images') {
            parallel {
                stage('Build API Image') {
                    steps {
                        dir('cicd/banking-app/backend-api') {
                            sh 'pwd'
                            sh 'ls -la'
                            sh 'cat Dockerfile'
                            sh 'docker build -t ${API_IMAGE}:${VERSION} -t ${API_IMAGE}:latest .'
                        }
                    }
                }
                
                stage('Build Processor Image') {
                    steps {
                        dir('cicd/banking-app/transaction-service') {
                            sh 'pwd'
                            sh 'ls -la'
                            sh 'cat Dockerfile'
                            sh 'docker build -t ${PROCESSOR_IMAGE}:${VERSION} -t ${PROCESSOR_IMAGE}:latest .'
                        }
                    }
                }
                
                stage('Build Frontend Image') {
                    steps {
                        dir('cicd/banking-app/frontend') {
                            sh 'pwd'
                            sh 'ls -la'
                            sh 'cat Dockerfile'
                            sh 'docker build -t ${FRONTEND_IMAGE}:${VERSION} -t ${FRONTEND_IMAGE}:latest .'
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            deleteDir()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}